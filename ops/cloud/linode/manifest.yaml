apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    email: morpheus.dev@soapbubble.online
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: morpheus.dev@soapbubble.online
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx
---  
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: aws-ecr
  name: pod-reader
rules:
- apiGroups: ["serviceaccounts"] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "delete"]
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ecr-cred-helper
  namespace: aws-ecr
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              ACCOUNT=892910702142
              REGION=us-east-1
              SECRET_NAME=${REGION}-ecr-registry
              EMAIL=anymail.doesnt.matter@example.com
              echo "Creating token for region ${REGION}"
              TOKEN=`aws ecr get-login --region ${REGION} --registry-ids ${ACCOUNT} | cut -d' ' -f6` 
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME
              kubectl create secret docker-registry $SECRET_NAME \
              --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${TOKEN}" \
              --docker-email="${EMAIL}"
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
              echo "Updating AWS token"
              CREDENTIALS=\$\(aws sts get-session-token\)
              AWS_ACCESS_KEY_ID=\$\(echo $CREDENTIALS | jq -r .Credentials.AccessKeyId\)
              AWS_SECRET_ACCESS_KEY=\$\(echo $CREDENTIALS | jq -r .Credentials.SecretAccessKey\)
              kubectl delete secret --ignore-not-found aws
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                  name: aws
              data:
                AWS_SECRET_ACCESS_KEY: $(echo $AWS_SECRET_ACCESS_KEY | base64 -w=0)
                AWS_ACCESS_KEY_ID: $(echo $AWS_ACCESS_KEY_ID | base64 -w=0)
              EOF
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              value: us-east-1
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: aws
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: aws
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            name: ecr-cred-helper
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 3
  suspend: false